package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.45

import (
	"context"
	"fmt"

	"github.com/cpaules/go-web-store/graph/model"
)

// ID is the resolver for the id field.
func (r *itemResolver) ID(ctx context.Context, obj *model.Item) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Sku is the resolver for the sku field.
func (r *itemResolver) Sku(ctx context.Context, obj *model.Item) (string, error) {
	panic(fmt.Errorf("not implemented: Sku - sku"))
}

// Price is the resolver for the price field.
func (r *itemResolver) Price(ctx context.Context, obj *model.Item) (float64, error) {
	panic(fmt.Errorf("not implemented: Price - price"))
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, item model.NewItem) (*model.Item, error) {
	panic(fmt.Errorf("not implemented: CreateItem - createItem"))
}

// AddItemToCart is the resolver for the addItemToCart field.
func (r *mutationResolver) AddItemToCart(ctx context.Context, sku string) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: AddItemToCart - addItemToCart"))
}

// Checkout is the resolver for the checkout field.
func (r *mutationResolver) Checkout(ctx context.Context, cartID string) (string, error) {
	panic(fmt.Errorf("not implemented: Checkout - checkout"))
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	panic(fmt.Errorf("not implemented: Items - items"))
}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: Cart - cart"))
}

// Item returns ItemResolver implementation.
func (r *Resolver) Item() ItemResolver { return &itemResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type itemResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
