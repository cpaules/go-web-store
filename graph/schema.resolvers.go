package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.36

import (
	"context"
	"math"

	"github.com/cpaules/go-web-store/graph/model"
)

// Total is the resolver for the total field.
func (r *cartResolver) Total(ctx context.Context, obj *model.Cart) (*float64, error) {
	var total float64
	for _, item := range r.cart.Items {
		total += item.Price
	}
	total = math.Round(total*100) / 100
	return &total, nil
}

// CreateItem is the resolver for the createItem field.
func (r *mutationResolver) CreateItem(ctx context.Context, item model.NewItem) (*model.Item, error) {
	newItem := &model.Item{
		Id:    len(r.items) + 1,
		Price: item.Price,
		Sku:   item.Sku,
	}
	r.items[item.Sku] = newItem
	return newItem, nil
}

// AddItemToCart is the resolver for the addItemToCart field.
func (r *mutationResolver) AddItemToCart(ctx context.Context, sku string) (*model.Cart, error) {
	// r.cart = &model.Cart{}
	r.cart.Items = append(r.cart.Items, r.items[sku])
	return r.cart, nil
}

// Checkout is the resolver for the checkout field.
func (r *mutationResolver) Checkout(ctx context.Context, cartID string) (string, error) {
	r.cart.Items = nil
	return "Checkout Complete!", nil
}

// Items is the resolver for the items field.
func (r *queryResolver) Items(ctx context.Context) ([]*model.Item, error) {
	var items []*model.Item
	for _, item := range r.items {
		items = append(items, item)
	}
	return items, nil
}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context) (*model.Cart, error) {
	return r.cart, nil
}

// Cart returns CartResolver implementation.
func (r *Resolver) Cart() CartResolver { return &cartResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type cartResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
